@model PointOS.ViewModels.ProductListViewModel
@{
    ViewData["Title"] = "Products";
}

<div class="container-fluid p-0">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li class="breadcrumb-item"><a href="#">eCommerce</a></li>
            <li class="breadcrumb-item active" aria-current="page">Products</li>
        </ol>
    </nav>

    <!-- Error Message Display -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Success Message Display -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Product List Card -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">All Products</h5>
            <a href="@Url.Action("Create", "Product")" class="btn btn-primary">
                <i class="fas fa-plus me-2"></i> Add Product
            </a>
        </div>
        <div class="card-body">
            <!-- Search and Filter Bar -->
            <!-- Search and Filter Bar -->
            <form id="filterForm" method="get" action="@Url.Action("Index", "Product")" class="mb-4">
                <div class="row g-3">
                    <div class="col-md-4">
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                                   value="@Model.SearchTerm" placeholder="Search products...">
                        </div>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="status" name="status">
                            <option value="">All Status</option>
                            <option value="@(Model.Status == "Published" ? "selected" : "")">Published</option>
                            <option value="@(Model.Status == "Scheduled" ? "selected" : "")">Scheduled</option>
                            <option value="@(Model.Status == "Inactive" ? "selected" : "")">Inactive</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="categoryId" name="categoryId">
                            <option value="">All Categories</option>
                            @if (Model?.Categories != null)
                            {
                                foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-filter me-2"></i> Filter
                            </button>
                            <a href="@Url.Action("Index", "Product")" class="btn btn-light">
                                <i class="fas fa-redo-alt me-2"></i> Reset
                            </a>
                        </div>
                    </div>
                </div>
                <!-- Hidden input to preserve page size when filtering -->
                <input type="hidden" name="pageSize" value="@Model!.PageSize" />
            </form>
            <!-- Product Table -->
            <div class="table-responsive">
                <table class="table" id="productsTable">
                    <thead>
                        <tr>
                            <th width="40px">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="selectAll">
                                </div>
                            </th>
                            <th>PRODUCT</th>
                            <th>SKU</th>
                            <th>QTY</th>
                            <th>PRICE</th>
                            <th>RATING</th>
                            <th>STATUS</th>
                            <th width="100px">ACTIONS</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model?.Products != null && Model.Products.Any())
                        {
                            foreach (var product in Model.Products)
                            {
                                <tr>
                                    <td>
                                        <div class="form-check">
                                            <input class="form-check-input product-checkbox" type="checkbox" value="@product.Id">
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="flex-shrink-0">
                                                <img src="@(string.IsNullOrEmpty(product.ExistingImage) ? "/media/products/default.png" : product.ExistingImage)"
                                                     alt="@product.Name" width="50" height="50" class="rounded">
                                            </div>
                                            <div class="ms-3">
                                                <h6 class="mb-0">
                                                    <a href="@Url.Action("Edit", "Product", new { id = product.Id })" class="text-dark text-decoration-none">
                                                        @product.Name
                                                    </a>
                                                </h6>
                                                <div class="text-muted small">@product.CategoryName</div>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@product.SKU</td>
                                    <td>
                                        <span class="badge @GetStockBadgeClass(product.Quantity)">@product.Quantity</span>
                                    </td>
                                    <td>$@product.Price.ToString("F2")</td>
                                    <td>
                                        <div class="rating">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="fas fa-star @(i <= product.Rating ? "text-warning" : "text-muted")"></i>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(product.Status)">@product.Status</span>
                                    </td>
                                    <td>
                                        <div class="dropdown">
                                            <button type="button" class="btn btn-sm btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end">
                                                <li>
                                                    <a class="dropdown-item" href="@Url.Action("Edit", "Product", new { id = product.Id })">
                                                        <i class="fas fa-edit text-primary me-2"></i> Edit
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item delete-product" href="#" data-id="@product.Id" data-name="@product.Name">
                                                        <i class="fas fa-trash text-danger me-2"></i> Delete
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <!-- In the actions dropdown of Product/Index.cshtml -->
                                                <li>
                                                    <a class="dropdown-item" href="@Url.Action("Details", "Product", new { id = product.Id })">
                                                        <i class="fas fa-eye text-info me-2"></i> View Details
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center py-4">
                                    <div class="py-5">
                                        <i class="fas fa-box fa-3x text-muted mb-3"></i>
                                        <h5>No products found</h5>
                                        <p class="text-muted">Try adjusting your search or filter to find what you're looking for.</p>
                                        <a href="@Url.Action("Create", "Product")" class="btn btn-primary mt-2">
                                            <i class="fas fa-plus me-2"></i> Add New Product
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Bulk Actions and Pagination -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-3">
                <div class="d-flex align-items-center mb-3 mb-md-0">
                    @if (Model?.Products != null && Model.Products.Any())
                    {
                        <div class="dropdown me-3">
                            <button class="btn btn-light dropdown-toggle" type="button" id="bulkActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false" disabled>
                                Bulk Actions
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="bulkActionsDropdown">
                                <li><a class="dropdown-item bulk-action" href="#" data-action="publish"><i class="fas fa-check-circle me-2 text-success"></i> Publish Selected</a></li>
                                <li><a class="dropdown-item bulk-action" href="#" data-action="inactive"><i class="fas fa-ban me-2 text-warning"></i> Mark as Inactive</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item bulk-action" href="#" data-action="delete"><i class="fas fa-trash me-2 text-danger"></i> Delete Selected</a></li>
                            </ul>
                        </div>

                        <select id="pageSizeSelect" class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                            <option value="10">10 per page</option>
                            <option value="25">25 per page</option>
                            <option value="50">50 per page</option>
                            <option value="100">100 per page</option>
                        </select>
                    }
                </div>

                <div class="d-flex flex-column flex-md-row align-items-center">
                    @if (Model.TotalItems > 0)
                    {
                        <span class="text-muted me-3">
                            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems) of @Model.TotalItems items
                        </span>
                    }

                    @await Html.PartialAsync("_Pagination", new
                        {
                            CurrentPage = Model.CurrentPage,
                            TotalPages = Model.TotalPages,
                            PageSize = Model.PageSize,
                            ActionName = "Index",
                            ControllerName = "Product",
                            RouteValues = new
                            {
                                searchTerm = Model.SearchTerm,
                                status = Model.Status,
                                categoryId = Model.CategoryId
                            }
                        })
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteProductModal" tabindex="-1" aria-labelledby="deleteProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteProductModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the product <strong id="productNameToDelete"></strong>?</p>
                <p class="text-danger mb-0"><i class="fas fa-exclamation-triangle me-2"></i> This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "published" => "badge-published",
            "scheduled" => "badge-scheduled",
            "inactive" => "badge-inactive",
            _ => "bg-secondary"
        };
    }

    public string GetStockBadgeClass(int quantity)
    {
        return quantity switch
        {
            0 => "bg-danger",
            <= 10 => "bg-warning",
            _ => "bg-success"
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Handle select all checkbox
            $('#selectAll').on('change', function() {
                $('.product-checkbox').prop('checked', $(this).is(':checked'));
                updateBulkActionButton();
            });

            // Handle individual checkboxes
            $('.product-checkbox').on('change', function() {
                updateBulkActionButton();

                // If any checkbox is unchecked, uncheck "Select All" checkbox
                if (!$(this).is(':checked')) {
                    $('#selectAll').prop('checked', false);
                }

                // If all checkboxes are checked, check "Select All" checkbox
                if ($('.product-checkbox:checked').length === $('.product-checkbox').length) {
                    $('#selectAll').prop('checked', true);
                }
            });

            // Update bulk action button state
            function updateBulkActionButton() {
                if ($('.product-checkbox:checked').length > 0) {
                    $('#bulkActionsDropdown').prop('disabled', false);
                } else {
                    $('#bulkActionsDropdown').prop('disabled', true);
                }
            }

            // Handle delete confirmation
            $('.delete-product').on('click', function(e) {
                e.preventDefault();
                const productId = $(this).data('id');
                const productName = $(this).data('name');

                $('#productNameToDelete').text(productName);
                $('#confirmDeleteBtn').attr('href', '@Url.Action("Delete", "Product")/' + productId);
                $('#deleteProductModal').modal('show');
            });

            // Bulk actions
            $('.bulk-action').on('click', function(e) {
                e.preventDefault();
                const action = $(this).data('action');
                const selectedIds = [];

                $('.product-checkbox:checked').each(function() {
                    selectedIds.push($(this).val());
                });

                if (selectedIds.length === 0) {
                    return;
                }

                if (action === 'delete') {
                    if (confirm(`Are you sure you want to delete ${selectedIds.length} selected products? This action cannot be undone.`)) {
                        // Send AJAX request to delete products
                        $.post('@Url.Action("BulkDelete", "Product")', { ids: selectedIds.join(',') })
                            .done(function() {
                                location.reload();
                            })
                            .fail(function() {
                                alert('Failed to delete products. Please try again.');
                            });
                    }
                } else if (action === 'publish' || action === 'inactive') {
                    // Send AJAX request to update status
                    $.post('@Url.Action("BulkUpdateStatus", "Product")', {
                        ids: selectedIds.join(','),
                        status: action === 'publish' ? 'Published' : 'Inactive'
                    })
                    .done(function() {
                        location.reload();
                    })
                    .fail(function() {
                        alert('Failed to update product status. Please try again.');
                    });
                }
            });

                   // Auto-submit form when filters change
        $('#status, #categoryId').on('change', function() {
            // Show loading indicator if desired
            // $('.loading-overlay').show();

            // Submit the form
            $('#filterForm').submit();
        });

                    // Search on enter key
        $('#searchTerm').on('keypress', function(e) {
            if (e.which === 13) {
                e.preventDefault(); // Prevent default form submission
                $('#filterForm').submit();
            }
        });
        });

        // Change page size function
               // For page size selector
        function changePageSize(size) {
            // Get current form values
            const searchTerm = $('#searchTerm').val();
            const status = $('#status').val();
            const categoryId = $('#categoryId').val();

            // Build URL with all current filters plus new page size
            let url = '@Url.Action("Index", "Product")' +
                '?pageSize=' + size +
                '&page=1'; // Reset to first page

            if (searchTerm) {
                url += '&searchTerm=' + encodeURIComponent(searchTerm);
            }

            if (status) {
                url += '&status=' + encodeURIComponent(status);
            }

            if (categoryId) {
                url += '&categoryId=' + encodeURIComponent(categoryId);
            }

            // Navigate to the new URL
            window.location.href = url;
        }
    </script>
}
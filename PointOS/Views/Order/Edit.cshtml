@model PointOS.ViewModels.OrderViewModel
@{
    ViewData["Title"] = "Edit Order";
}

<div class="container-fluid p-0">
    <!-- Header with breadcrumb and actions -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h4 class="mb-1">Edit Order</h4>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
                    <li class="breadcrumb-item"><a href="#">eCommerce</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Order")">Sales</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Edit Order</li>
                </ol>
            </nav>
        </div>
        <div>
            <a href="@Url.Action("Details", "Order", new { id = Model.Id })" class="btn btn-light me-2">
                <i class="fas fa-eye me-1"></i> View Details
            </a>
            <button type="submit" form="orderForm" class="btn btn-primary">
                <i class="fas fa-save me-1"></i> Save Changes
            </button>
        </div>
    </div>

    <!-- Error & Success Messages -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <form id="orderForm" asp-action="Edit" asp-controller="Order" method="post">
        <input type="hidden" asp-for="Id" />

        <div class="row">
            <!-- Order Details Section -->
            <div class="col-md-4 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-header bg-transparent">
                        <h5 class="mb-0">Order Details</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label asp-for="OrderNumber" class="form-label">Order ID</label>
                            <div class="input-group">
                                <span class="input-group-text">#</span>
                                <input asp-for="OrderNumber" class="form-control" readonly />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label asp-for="PaymentMethod" class="form-label required">Payment Method</label>
                            <select asp-for="PaymentMethod" class="form-select">
                                <option value="">Select an option</option>
                                <option value="Credit Card (Visa)">Credit Card (Visa)</option>
                                <option value="Credit Card (Mastercard)">Credit Card (Mastercard)</option>
                                <option value="PayPal">PayPal</option>
                                <option value="Bank Transfer">Bank Transfer</option>
                                <option value="Cash on Delivery">Cash on Delivery</option>
                            </select>
                            <span asp-validation-for="PaymentMethod" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="ShippingMethod" class="form-label required">Shipping Method</label>
                            <select asp-for="ShippingMethod" class="form-select">
                                <option value="">Select an option</option>
                                <option value="Standard Rate">Standard Rate</option>
                                <option value="Express Delivery">Express Delivery</option>
                                <option value="Next Day Delivery">Next Day Delivery</option>
                                <option value="In-Store Pickup">In-Store Pickup</option>
                            </select>
                            <span asp-validation-for="ShippingMethod" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="DateAdded" class="form-label required">Order Date</label>
                            <input asp-for="DateAdded" type="date" class="form-control" />
                            <span asp-validation-for="DateAdded" class="text-danger"></span>
                        </div>

                        <div class="mb-3">
                            <label asp-for="Status" class="form-label required">Status</label>
                            <select asp-for="Status" class="form-select">
                                <option value="Processing">Processing</option>
                                <option value="Pending">Pending</option>
                                <option value="Delivering">Delivering</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                                <option value="Failed">Failed</option>
                            </select>
                            <span asp-validation-for="Status" class="text-danger"></span>
                        </div>

                        <!-- Display Created/Modified Dates -->
                        <div class="d-flex justify-content-between text-muted small mt-4">
                            <div>Created: @Model.DateAdded.ToString("dd/MM/yyyy")</div>
                            <div>Last Modified: @(Model.DateModified?.ToString("dd/MM/yyyy") ?? "N/A")</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Select Products Section -->
            <div class="col-md-8 mb-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-header bg-transparent d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Order Items</h5>
                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addProductModal">
                            <i class="fas fa-plus me-1"></i> Add Products
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="selectedProductsContainer">
                            <div id="selectedProductsList" class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>SKU</th>
                                            <th>Unit Price</th>
                                            <th width="120px">Quantity</th>
                                            <th>Subtotal</th>
                                            <th width="80px">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="orderItemsTableBody">
                                        @if (Model.OrderItems != null && Model.OrderItems.Any())
                                        {
                                            @for (int i = 0; i < Model.OrderItems.Count; i++)
                                            {
                                                var item = Model.OrderItems[i];
                                                <tr data-item-id="@item.Id">
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <img src="@(string.IsNullOrEmpty(item.ProductImageUrl) ? "/api/placeholder/50/50" : item.ProductImageUrl)"
                                                                 alt="@item.ProductName" width="40" height="40" class="rounded border me-2">
                                                            <span>@item.ProductName</span>
                                                        </div>
                                                        <input type="hidden" name="OrderItems[@i].Id" value="@item.Id" />
                                                        <input type="hidden" name="OrderItems[@i].ProductId" value="@item.ProductId" />
                                                        <input type="hidden" name="OrderItems[@i].ProductName" value="@item.ProductName" />
                                                        <input type="hidden" name="OrderItems[@i].ProductImageUrl" value="@item.ProductImageUrl" />
                                                    </td>
                                                    <td>
                                                        @item.SKU
                                                        <input type="hidden" name="OrderItems[@i].SKU" value="@item.SKU" />
                                                    </td>
                                                    <td>
                                                        <div class="input-group input-group-sm" style="width: 120px;">
                                                            <span class="input-group-text">$</span>
                                                            <input type="number" class="form-control item-price"
                                                                   name="OrderItems[@i].UnitPrice" value="@item.UnitPrice.ToString("F2")"
                                                                   min="0" step="0.01" onchange="updateItemSubtotal(this)" />
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="input-group input-group-sm">
                                                            <button class="btn btn-outline-secondary btn-decrease-qty" type="button">-</button>
                                                            <input type="number" class="form-control text-center item-quantity"
                                                                   name="OrderItems[@i].Quantity" value="@item.Quantity"
                                                                   min="1" onchange="updateItemSubtotal(this)" />
                                                            <button class="btn btn-outline-secondary btn-increase-qty" type="button">+</button>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="item-subtotal">$@item.Subtotal.ToString("F2")</span>
                                                        <input type="hidden" name="OrderItems[@i].Discount" value="@item.Discount.ToString("F2")" />
                                                        <input type="hidden" name="OrderItems[@i].DeliveryDate" value="@item.DeliveryDate.ToString("yyyy-MM-dd")" />
                                                    </td>
                                                    <td>
                                                        <button type="button" class="btn btn-sm btn-outline-danger btn-remove-item">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr id="noItemsRow">
                                                <td colspan="6" class="text-center py-3">
                                                    <p class="text-muted mb-0">No products added to this order</p>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <div class="d-flex justify-content-end mt-4">
                            <div class="bg-light p-3 rounded" style="min-width: 250px;">
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Subtotal:</span>
                                    <span id="subtotalValue">$@Model.Total.ToString("F2")</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <div class="d-flex align-items-center">
                                        <span>VAT (</span>
                                        <input type="number" id="vatRateInput" class="form-control form-control-sm mx-1"
                                               style="width: 60px;" min="0" max="100" step="0.1"
                                               value="@Model.VAT.ToString("F1")" onchange="updateOrderTotals()">
                                        <span>%):</span>
                                    </div>
                                    <span id="vatValue">$@((Model.Total * Model.VAT / 100).ToString("F2"))</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span>Shipping:</span>
                                    <div class="input-group input-group-sm" style="width: 100px;">
                                        <span class="input-group-text">$</span>
                                        <input type="number" id="shippingRateInput" class="form-control"
                                               min="0" step="0.01" value="@Model.ShippingRate.ToString("F2")"
                                               onchange="updateOrderTotals()">
                                    </div>
                                </div>
                                <hr>
                                <div class="d-flex justify-content-between fw-bold">
                                    <span>Grand Total:</span>
                                    <span id="grandTotalValue" class="fs-5">$@Model.GrandTotal.ToString("F2")</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Billing & Shipping Section -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-transparent">
                <h5 class="mb-0">Delivery Details</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Billing Address -->
                    <div class="col-md-6 mb-4">
                        <h6 class="mb-3">Billing Address</h6>
                        <div class="mb-3">
                            <label asp-for="BillingAddress" class="form-label required">Address Line 1</label>
                            <input asp-for="BillingAddress" class="form-control" />
                            <span asp-validation-for="BillingAddress" class="text-danger"></span>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <label asp-for="BillingCity" class="form-label">City</label>
                                <input asp-for="BillingCity" class="form-control" />
                                <span asp-validation-for="BillingCity" class="text-danger"></span>
                            </div>
                            <div class="col">
                                <label asp-for="BillingPostalCode" class="form-label required">Postcode</label>
                                <input asp-for="BillingPostalCode" class="form-control" />
                                <span asp-validation-for="BillingPostalCode" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col">
                                <label asp-for="BillingState" class="form-label required">State</label>
                                <input asp-for="BillingState" class="form-control" />
                                <span asp-validation-for="BillingState" class="text-danger"></span>
                            </div>
                            <div class="col">
                                <label asp-for="BillingCountry" class="form-label required">Country</label>
                                <select asp-for="BillingCountry" class="form-select">
                                    <option value="">Select a country</option>
                                    <option value="Australia">Australia</option>
                                    <option value="United States">United States</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                    <option value="Canada">Canada</option>
                                    <option value="New Zealand">New Zealand</option>
                                    <!-- Add more countries as needed -->
                                </select>
                                <span asp-validation-for="BillingCountry" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <!-- Shipping Address -->
                    <div class="col-md-6 mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="mb-0">Shipping Address</h6>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="sameAsBilling"
                                @(Model.FullBillingAddress == Model.FullShippingAddress ? "checked" : "")>
                                <label class="form-check-label" for="sameAsBilling">
                                    Shipping address is the same as billing address
                                </label>
                            </div>
                        </div>
                        <div id="shippingAddressFields">
                            <div class="mb-3">
                                <label asp-for="ShippingAddress" class="form-label">Address Line 1</label>
                                <input asp-for="ShippingAddress" class="form-control" />
                                <span asp-validation-for="ShippingAddress" class="text-danger"></span>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label asp-for="ShippingCity" class="form-label">City</label>
                                    <input asp-for="ShippingCity" class="form-control" />
                                    <span asp-validation-for="ShippingCity" class="text-danger"></span>
                                </div>
                                <div class="col">
                                    <label asp-for="ShippingPostalCode" class="form-label">Postcode</label>
                                    <input asp-for="ShippingPostalCode" class="form-control" />
                                    <span asp-validation-for="ShippingPostalCode" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label asp-for="ShippingState" class="form-label">State</label>
                                    <input asp-for="ShippingState" class="form-control" />
                                    <span asp-validation-for="ShippingState" class="text-danger"></span>
                                </div>
                                <div class="col">
                                    <label asp-for="ShippingCountry" class="form-label">Country</label>
                                    <select asp-for="ShippingCountry" class="form-select">
                                        <option value="">Select a country</option>
                                        <option value="Australia">Australia</option>
                                        <option value="United States">United States</option>
                                        <option value="United Kingdom">United Kingdom</option>
                                        <option value="Canada">Canada</option>
                                        <option value="New Zealand">New Zealand</option>
                                        <!-- Add more countries as needed -->
                                    </select>
                                    <span asp-validation-for="ShippingCountry" class="text-danger"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Customer Information -->
                <h6 class="mb-3">Customer Information</h6>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="CustomerName" class="form-label required">Customer Name</label>
                            <input asp-for="CustomerName" class="form-control" />
                            <span asp-validation-for="CustomerName" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="CustomerEmail" class="form-label required">Customer Email</label>
                            <input asp-for="CustomerEmail" type="email" class="form-control" />
                            <span asp-validation-for="CustomerEmail" class="text-danger"></span>
                        </div>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="CustomerPhone" class="form-label">Customer Phone</label>
                            <input asp-for="CustomerPhone" class="form-control" />
                            <span asp-validation-for="CustomerPhone" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label asp-for="RewardPoints" class="form-label">Reward Points</label>
                            <input asp-for="RewardPoints" type="number" class="form-control" />
                            <span asp-validation-for="RewardPoints" class="text-danger"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Additional Information -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-transparent">
                <h5 class="mb-0">Additional Information</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label asp-for="InvoiceNumber" class="form-label">Invoice Number</label>
                        <input asp-for="InvoiceNumber" class="form-control" />
                    </div>
                    <div class="col-md-6 mb-3">
                        <label asp-for="ShippingTrackingNumber" class="form-label">Shipping Tracking Number</label>
                        <input asp-for="ShippingTrackingNumber" class="form-control" />
                    </div>
                </div>
            </div>
        </div>

        <!-- Hidden fields for calculated values -->
        <input type="hidden" asp-for="Total" id="hiddenSubtotal" />
        <input type="hidden" asp-for="VAT" id="hiddenVAT" />
        <input type="hidden" asp-for="ShippingRate" id="hiddenShippingRate" />
        <input type="hidden" asp-for="GrandTotal" id="hiddenGrandTotal" />

        <!-- Action buttons -->
        <div class="d-flex justify-content-between mb-4">
            <a href="@Url.Action("Details", "Order", new { id = Model.Id })" class="btn btn-light">
                <i class="fas fa-arrow-left me-1"></i> Back to Details
            </a>
            <div>
                <a href="@Url.Action("Index", "Order")" class="btn btn-light me-2">
                    <i class="fas fa-times me-1"></i> Cancel
                </a>
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save me-1"></i> Save Changes
                </button>
            </div>
        </div>
    </form>
</div>

<!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add Products to Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="searchProducts" class="form-control" placeholder="Search Products">
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table table-hover" id="productsTable">
                        <thead>
                            <tr>
                                <th width="50px"></th>
                                <th width="80px">Image</th>
                                <th>Product</th>
                                <th>SKU</th>
                                <th>Price</th>
                                <th>QTY Remaining</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- This will be populated by AJAX -->
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="addSelectedProducts">Add Selected Products</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .required::after {
            content: " *";
            color: red;
        }

        .table .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        .input-group-sm {
            height: 31px;
        }

            .input-group-sm input {
                height: 31px;
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
            }

            .input-group-sm .btn {
                height: 31px;
                padding: 0.25rem 0.5rem;
                font-size: 0.875rem;
                display: flex;
                align-items: center;
                justify-content: center;
            }
    </style>
}

@section Scripts {
    <script>
        // Products data (this would typically come from your backend)
        const availableProducts = [
            {
                id: 1,
                name: "Product 1",
                price: 300.00,
                sku: "03197005",
                imageUrl: "/api/placeholder/70/70",
                stock: 44
            },
            {
                id: 2,
                name: "Product 2",
                price: 174.00,
                sku: "02284001",
                imageUrl: "/api/placeholder/70/70",
                stock: 33
            },
            {
                id: 3,
                name: "Product 3",
                price: 237.00,
                sku: "04153004",
                imageUrl: "/api/placeholder/70/70",
                stock: 15
            },
            {
                id: 4,
                name: "Product 4",
                price: 125.00,
                sku: "02154007",
                imageUrl: "/api/placeholder/70/70",
                stock: 28
            },
            {
                id: 5,
                name: "Product 5",
                price: 195.00,
                sku: "02858005",
                imageUrl: "/api/placeholder/70/70",
                stock: 41
            },
            {
                id: 6,
                name: "Product 6",
                price: 230.00,
                sku: "02690008",
                imageUrl: "/api/placeholder/70/70",
                stock: 29
            }
        ];

        $(document).ready(function() {
            // Populate products table
            populateProductsTable(availableProducts);

            // Set initial values for calculations
            updateOrderTotals();

            // Handle search products
            $('#searchProducts').on('input', function() {
                const searchTerm = $(this).val().toLowerCase();
                const filteredProducts = availableProducts.filter(p =>
                    p.name.toLowerCase().includes(searchTerm) ||
                    p.sku.toLowerCase().includes(searchTerm)
                );
                populateProductsTable(filteredProducts);
            });

            // Handle add selected products button
            $('#addSelectedProducts').click(function() {
                const checkedRows = $('#productsTable tbody input[type="checkbox"]:checked');
                let newRowsAdded = false;

                checkedRows.each(function() {
                    const productId = $(this).val();
                    const product = availableProducts.find(p => p.id == productId);

                    // Add product to order items
                    addProductToOrderItems(product);
                    newRowsAdded = true;
                });

                if (newRowsAdded) {
                    // Remove "no items" row if it exists
                    $('#noItemsRow').remove();

                    // Update order totals
                    updateOrderTotals();
                }

                $('#addProductModal').modal('hide');
            });

            // Handle "Same as Billing" checkbox
            $('#sameAsBilling').change(function() {
                if ($(this).is(':checked')) {
                    // Copy billing address to shipping address
                    $('#ShippingAddress').val($('#BillingAddress').val());
                    $('#ShippingCity').val($('#BillingCity').val());
                    $('#ShippingPostalCode').val($('#BillingPostalCode').val());
                    $('#ShippingState').val($('#BillingState').val());
                    $('#ShippingCountry').val($('#BillingCountry').val());

                    // Disable shipping fields
                    $('#shippingAddressFields input, #shippingAddressFields select').prop('disabled', true);
                } else {
                    // Enable shipping fields
                    $('#shippingAddressFields input, #shippingAddressFields select').prop('disabled', false);
                }
            });

            // Trigger the change event to set the initial state
            $('#sameAsBilling').trigger('change');

            // Handle increasing quantity buttons
            $(document).on('click', '.btn-increase-qty', function() {
                const input = $(this).siblings('input.item-quantity');
                const currentValue = parseInt(input.val()) || 1;
                input.val(currentValue + 1);
                input.trigger('change');
            });

            // Handle decreasing quantity buttons
            $(document).on('click', '.btn-decrease-qty', function() {
                const input = $(this).siblings('input.item-quantity');
                const currentValue = parseInt(input.val()) || 2;
                if (currentValue > 1) {
                    input.val(currentValue - 1);
                    input.trigger('change');
                }
            });

            // Handle removing order items
            $(document).on('click', '.btn-remove-item', function() {
                const row = $(this).closest('tr');

                // Remove the row
                row.remove();

                // If no rows left, add "no items" row
                if ($('#orderItemsTableBody tr').length === 0) {
                    $('#orderItemsTableBody').append(`
                        <tr id="noItemsRow">
                            <td colspan="6" class="text-center py-3">
                                <p class="text-muted mb-0">No products added to this order</p>
                            </td>
                        </tr>
                    `);
                }

                // Update order totals
                updateOrderTotals();
            });

            // Update shipping rate based on shipping method
            $('#ShippingMethod').change(function() {
                const method = $(this).val();
                let rate = 0;

                switch (method) {
                    case 'Standard Rate':
                        rate = 10.00;
                        break;
                    case 'Express Delivery':
                        rate = 25.00;
                        break;
                    case 'Next Day Delivery':
                        rate = 35.00;
                        break;
                    case 'In-Store Pickup':
                        rate = 0;
                        break;
                    default:
                        rate = 0;
                }

                $('#shippingRateInput').val(rate.toFixed(2));
                updateOrderTotals();
            });
        });

        // Function to populate products table
        function populateProductsTable(products) {
            const tbody = $('#productsTable tbody');
            tbody.empty();

            if (products.length === 0) {
                tbody.append(`
                    <tr>
                        <td colspan="6" class="text-center py-3">No products found</td>
                    </tr>
                `);
                return;
            }

            // Get current product IDs in the order
            const currentProductIds = [];
            $('#orderItemsTableBody tr').each(function() {
                const inputs = $(this).find('input[name$=".ProductId"]');
                if (inputs.length > 0) {
                    currentProductIds.push(parseInt(inputs.val()));
                }
            });

            products.forEach(product => {
                const isInOrder = currentProductIds.includes(product.id);

                tbody.append(`
                    <tr>
                        <td class="text-center">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="${product.id}" ${isInOrder ? 'checked disabled' : ''}>
                            </div>
                        </td>
                        <td>
                            <img src="${product.imageUrl}" alt="${product.name}" width="50" height="50" class="rounded border">
                        </td>
                        <td>${product.name}</td>
                        <td>${product.sku}</td>
                        <td>${product.price.toFixed(2)}</td>
                        <td>${product.stock} ${product.stock <= 10 ? '<span class="badge bg-warning">Low stock</span>' : ''}</td>
                    </tr>
                `);
            });
        }

        // Function to add a product to order items
        function addProductToOrderItems(product) {
            // Get current row count for proper indexing
            const rowCount = $('#orderItemsTableBody tr').not('#noItemsRow').length;

            // Create new row with the product
            const newRow = `
                <tr data-item-id="new-${rowCount}">
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${product.imageUrl}" alt="${product.name}" width="40" height="40" class="rounded border me-2">
                            <span>${product.name}</span>
                        </div>
                        <input type="hidden" name="OrderItems[${rowCount}].Id" value="0" />
                        <input type="hidden" name="OrderItems[${rowCount}].ProductId" value="${product.id}" />
                        <input type="hidden" name="OrderItems[${rowCount}].ProductName" value="${product.name}" />
                        <input type="hidden" name="OrderItems[${rowCount}].ProductImageUrl" value="${product.imageUrl}" />
                    </td>
                    <td>
                        ${product.sku}
                        <input type="hidden" name="OrderItems[${rowCount}].SKU" value="${product.sku}" />
                    </td>
                    <td>
                        <div class="input-group input-group-sm" style="width: 120px;">
                            <span class="input-group-text">$</span>
                            <input type="number" class="form-control item-price"
                                  name="OrderItems[${rowCount}].UnitPrice" value="${product.price.toFixed(2)}"
                                  min="0" step="0.01" onchange="updateItemSubtotal(this)" />
                        </div>
                    </td>
                    <td>
                        <div class="input-group input-group-sm">
                            <button class="btn btn-outline-secondary btn-decrease-qty" type="button">-</button>
                            <input type="number" class="form-control text-center item-quantity"
                                  name="OrderItems[${rowCount}].Quantity" value="1"
                                  min="1" max="${product.stock}" onchange="updateItemSubtotal(this)" />
                            <button class="btn btn-outline-secondary btn-increase-qty" type="button">+</button>
                        </div>
                    </td>
                    <td>
                        <span class="item-subtotal">${product.price.toFixed(2)}</span>
                        <input type="hidden" name="OrderItems[${rowCount}].Discount" value="0" />
                        <input type="hidden" name="OrderItems[${rowCount}].DeliveryDate" value="${new Date().toISOString().split('T')[0]}" />
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-danger btn-remove-item">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            `;

            // Append the new row to the table
            $('#orderItemsTableBody').append(newRow);
        }

        // Function to update item subtotal
        function updateItemSubtotal(element) {
            const row = $(element).closest('tr');
            const priceInput = row.find('.item-price');
            const quantityInput = row.find('.item-quantity');

            const price = parseFloat(priceInput.val()) || 0;
            const quantity = parseInt(quantityInput.val()) || 1;

            const subtotal = price * quantity;
            row.find('.item-subtotal').text(' + subtotal.toFixed(2));

            // Update overall order totals
            updateOrderTotals();
        }

        // Function to update order totals
        function updateOrderTotals() {
            // Calculate subtotal from all order items
            let subtotal = 0;
            $('#orderItemsTableBody tr').not('#noItemsRow').each(function() {
                const priceEl = $(this).find('.item-price');
                const quantityEl = $(this).find('.item-quantity');

                if (priceEl.length && quantityEl.length) {
                    const price = parseFloat(priceEl.val()) || 0;
                    const quantity = parseInt(quantityEl.val()) || 1;
                    subtotal += price * quantity;
                }
            });

            // Get VAT rate and shipping rate
            const vatRate = parseFloat($('#vatRateInput').val()) || 0;
            const shippingRate = parseFloat($('#shippingRateInput').val()) || 0;

            // Calculate VAT amount
            const vatAmount = subtotal * (vatRate / 100);

            // Calculate grand total
            const grandTotal = subtotal + vatAmount + shippingRate;

            // Update UI
            $('#subtotalValue').text(' + subtotal.toFixed(2));
            $('#vatValue').text(' + vatAmount.toFixed(2));
            $('#totalCostValue').text(' + grandTotal.toFixed(2));

            // Update hidden fields
            $('#hiddenSubtotal').val(subtotal);
            $('#hiddenVAT').val(vatRate);
            $('#hiddenShippingRate').val(shippingRate);
            $('#hiddenGrandTotal').val(grandTotal);
        }
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
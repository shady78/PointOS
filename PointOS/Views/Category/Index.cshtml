@model PointOS.ViewModels.CategoryListViewModel
@{
    ViewData["Title"] = "Categories";
}

<div class="container-fluid p-0">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
            <li class="breadcrumb-item"><a href="#">eCommerce</a></li>
            <li class="breadcrumb-item active" aria-current="page">Categories</li>
        </ol>
    </nav>

    <!-- Error Message Display -->
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    <!-- Success Message Display -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Action Buttons Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h5 class="mb-0">Category Management</h5>
        <a href="@Url.Action("Create", "Category")" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i> Add Category
        </a>
    </div>

    <!-- Stats Row -->
    <div class="row mb-4">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="rounded p-3 bg-primary bg-opacity-10">
                            <i class="fas fa-tags text-primary fa-2x"></i>
                        </div>
                        <div class="ms-3">
                            <h5 class="mb-1">@Model.Categories!.Count()</h5>
                            <p class="mb-0 text-muted">Total Categories</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="rounded p-3 bg-success bg-opacity-10">
                            <i class="fas fa-robot text-success fa-2x"></i>
                        </div>
                        <div class="ms-3">
                            <h5 class="mb-1">@Model.Categories!.Count(c => c.Type == "Automated")</h5>
                            <p class="mb-0 text-muted">Automated Categories</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="rounded p-3 bg-info bg-opacity-10">
                            <i class="fas fa-user-edit text-info fa-2x"></i>
                        </div>
                        <div class="ms-3">
                            <h5 class="mb-1">@Model.Categories!.Count(c => c.Type == "Manual")</h5>
                            <p class="mb-0 text-muted">Manual Categories</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Category List Card -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">All Categories</h5>
            <div class="d-flex">
                <button class="btn btn-light me-2 toggle-view-btn" data-view="grid" title="Grid View">
                    <i class="fas fa-th-large"></i>
                </button>
                <button class="btn btn-primary toggle-view-btn" data-view="list" title="List View">
                    <i class="fas fa-list"></i>
                </button>
            </div>
        </div>
        <div class="card-body">
            <!-- Search and Filter Bar -->
            <form id="filterForm" method="get" action="@Url.Action("Index", "Category")" class="mb-4">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text bg-light"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm" 
                                   value="@Model.SearchTerm" placeholder="Search categories...">
                        </div>
                    </div>
                    <div class="col-md-3">
                        <select class="form-select" id="type" name="type">
                            <option value="">All Types</option>
                            <option value="@(Model.Type == "Automated" ? "selected" : "")">Automated</option>
                            <option value="@(Model.Type == "Manual" ? "selected" : "")">Manual</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <div class="d-flex">
                            <button type="submit" class="btn btn-primary me-2">
                                <i class="fas fa-filter me-2"></i> Filter
                            </button>
                            <a href="@Url.Action("Index", "Category")" class="btn btn-light">
                                <i class="fas fa-redo-alt me-2"></i> Reset
                            </a>
                        </div>
                    </div>
                </div>
                <!-- Hidden input to preserve page size when filtering -->
                <input type="hidden" name="pageSize" value="@Model.PageSize" />
            </form>

            <!-- List View (Default) -->
            <div id="listView">
                <div class="table-responsive">
                    <table class="table" id="categoriesTable">
                        <thead>
                            <tr>
                                <th width="40px">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="selectAll">
                                    </div>
                                </th>
                                <th>CATEGORY</th>
                                <th>TYPE</th>
                                <th>PRODUCTS</th>
                                <th width="100px">ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model?.Categories != null && Model.Categories.Any())
                            {
                                foreach (var category in Model.Categories)
                                {
                                    <tr>
                                        <td>
                                            <div class="form-check">
                                                <input class="form-check-input category-checkbox" type="checkbox" value="@category.Id">
                                            </div>
                                        </td>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="flex-shrink-0">
                                                    @if (string.IsNullOrEmpty(category.ExistingImage))
                                                    {
                                                        <div class="rounded bg-light d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                                            <span class="fw-bold text-secondary">@category.Name.Substring(0, 1).ToUpper()</span>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <img src="@category.ExistingImage" alt="@category.Name" width="50" height="50" class="rounded">
                                                    }
                                                </div>
                                                <div class="ms-3">
                                                    <h6 class="mb-0">
                                                        <a href="@Url.Action("Edit", "Category", new { id = category.Id })" class="text-dark text-decoration-none">
                                                            @category.Name
                                                        </a>
                                                    </h6>
                                                    <div class="text-muted small">@(string.IsNullOrEmpty(category.Description) ? "No description" : (category.Description.Length > 50 ? category.Description.Substring(0, 50) + "..." : category.Description))</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td>
                                            <span class="badge @GetTypeBadgeClass(category.Type)">@category.Type</span>
                                        </td>
                                        <td>
                                            <a href="@Url.Action("Index", "Product", new { categoryId = category.Id })" class="text-decoration-none">
                                                @(category.Products?.Count() ?? 0) products
                                            </a>
                                        </td>
                                        <td>
                                            <div class="dropdown">
                                                <button type="button" class="btn btn-sm btn-light dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu dropdown-menu-end">
                                                    <li>
                                                        <a class="dropdown-item" href="@Url.Action("Edit", "Category", new { id = category.Id })">
                                                            <i class="fas fa-edit text-primary me-2"></i> Edit
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item delete-category" href="#" data-id="@category.Id" data-name="@category.Name">
                                                            <i class="fas fa-trash text-danger me-2"></i> Delete
                                                        </a>
                                                    </li>
                                                    <li><hr class="dropdown-divider"></li>
                                                    <li>
                                                        <a class="dropdown-item" href="@Url.Action("Index", "Product", new { categoryId = category.Id })">
                                                            <i class="fas fa-box text-info me-2"></i> View Products
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center py-4">
                                        <div class="py-5">
                                            <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                                            <h5>No categories found</h5>
                                            <p class="text-muted">Try adjusting your search or filter to find what you're looking for.</p>
                                            <a href="@Url.Action("Create", "Category")" class="btn btn-primary mt-2">
                                                <i class="fas fa-plus me-2"></i> Add New Category
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Grid View (Toggle) -->
            <div id="gridView" class="d-none">
                <div class="row">
                    @if (Model?.Categories != null && Model.Categories.Any())
                    {
                        foreach (var category in Model.Categories)
                        {
                            <div class="col-md-4 col-xl-3 mb-4">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between mb-3">
                                            <div class="form-check">
                                                <input class="form-check-input category-checkbox-grid" type="checkbox" value="@category.Id">
                                            </div>
                                            <span class="badge @GetTypeBadgeClass(category.Type)">@category.Type</span>
                                        </div>
                                        <div class="text-center mb-3">
                                            @if (string.IsNullOrEmpty(category.ExistingImage))
                                            {
                                                <div class="rounded-circle bg-light d-flex align-items-center justify-content-center mx-auto" style="width: 80px; height: 80px;">
                                                    <span class="fw-bold fs-4 text-secondary">@category.Name.Substring(0, 1).ToUpper()</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <img src="@category.ExistingImage" alt="@category.Name" class="rounded-circle" width="80" height="80">
                                            }
                                        </div>
                                        <h5 class="text-center mb-2">@category.Name</h5>
                                        <p class="text-muted text-center small mb-3">
                                            @(string.IsNullOrEmpty(category.Description) ? "No description" : (category.Description.Length > 100 ? category.Description.Substring(0, 100) + "..." : category.Description))
                                        </p>
                                        <div class="text-center mb-3">
                                            <a href="@Url.Action("Index", "Product", new { categoryId = category.Id })" class="text-decoration-none">
                                                <i class="fas fa-box me-1"></i> @(category.Products?.Count() ?? 0) products
                                            </a>
                                        </div>
                                        <div class="d-flex justify-content-center">
                                            <a href="@Url.Action("Edit", "Category", new { id = category.Id })" class="btn btn-sm btn-light me-2">
                                                <i class="fas fa-edit text-primary"></i>
                                            </a>
                                            <a href="#" class="btn btn-sm btn-light me-2 delete-category-grid" data-id="@category.Id" data-name="@category.Name">
                                                <i class="fas fa-trash text-danger"></i>
                                            </a>
                                            <a href="@Url.Action("Index", "Product", new { categoryId = category.Id })" class="btn btn-sm btn-light">
                                                <i class="fas fa-eye text-info"></i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="col-12 text-center py-5">
                            <i class="fas fa-tags fa-3x text-muted mb-3"></i>
                            <h5>No categories found</h5>
                            <p class="text-muted">Try adjusting your search or filter to find what you're looking for.</p>
                            <a href="@Url.Action("Create", "Category")" class="btn btn-primary mt-2">
                                <i class="fas fa-plus me-2"></i> Add New Category
                            </a>
                        </div>
                    }
                </div>
            </div>

            <!-- Bulk Actions and Pagination -->
            <div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-3">
                <div class="d-flex align-items-center mb-3 mb-md-0">
                    @if (Model?.Categories != null && Model.Categories.Any())
                    {
                        <div class="dropdown me-3">
                            <button class="btn btn-light dropdown-toggle" type="button" id="bulkActionsDropdown" data-bs-toggle="dropdown" aria-expanded="false" disabled>
                                Bulk Actions
                            </button>
                            <ul class="dropdown-menu" aria-labelledby="bulkActionsDropdown">
                                <li><a class="dropdown-item bulk-action" href="#" data-action="automated"><i class="fas fa-robot me-2 text-success"></i> Set as Automated</a></li>
                                <li><a class="dropdown-item bulk-action" href="#" data-action="manual"><i class="fas fa-user-edit me-2 text-info"></i> Set as Manual</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item bulk-action" href="#" data-action="delete"><i class="fas fa-trash me-2 text-danger"></i> Delete Selected</a></li>
                            </ul>
                        </div>
                        
                        <select id="pageSizeSelect" class="form-select form-select-sm" style="width: auto;" onchange="changePageSize(this.value)">
                            <option value="10" >10 per page</option>
                            <option value="25">25 per page</option>
                            <option value="50" >50 per page</option>
                            <option value="100" >100 per page</option>
                        </select>
                    }
                </div>
                
                <div class="d-flex flex-column flex-md-row align-items-center">
                    @if (Model.TotalItems > 0)
                    {
                        <span class="text-muted me-3">
                            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems) of @Model.TotalItems items
                        </span>
                    }
                    
                    @await Html.PartialAsync("_Pagination", new
                    {
                        CurrentPage = Model.CurrentPage,
                        TotalPages = Model.TotalPages,
                        PageSize = Model.PageSize,
                        ActionName = "Index",
                        ControllerName = "Category",
                        RouteValues = new
                        {
                            searchTerm = Model.SearchTerm,
                            type = Model.Type
                        }
                    })
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteCategoryModal" tabindex="-1" aria-labelledby="deleteCategoryModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteCategoryModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the category <strong id="categoryNameToDelete"></strong>?</p>
                <p class="text-warning mb-0"><i class="fas fa-exclamation-triangle me-2"></i> All products in this category will be unassigned.</p>
                <p class="text-danger mb-0"><i class="fas fa-exclamation-triangle me-2"></i> This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                <a href="#" id="confirmDeleteBtn" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@functions {
    public string GetTypeBadgeClass(string type)
    {
        return type switch
        {
            "Automated" => "bg-success",
            "Manual" => "bg-info",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Toggle between list and grid views
            $('.toggle-view-btn').on('click', function() {
                const view = $(this).data('view');
                $('.toggle-view-btn').removeClass('btn-primary').addClass('btn-light');
                $(this).removeClass('btn-light').addClass('btn-primary');
                
                if (view === 'grid') {
                    $('#listView').addClass('d-none');
                    $('#gridView').removeClass('d-none');
                } else {
                    $('#gridView').addClass('d-none');
                    $('#listView').removeClass('d-none');
                }
                
                // Save preference to local storage
                localStorage.setItem('categoryViewPreference', view);
            });
            
            // Load view preference from local storage
            const savedViewPreference = localStorage.getItem('categoryViewPreference');
            if (savedViewPreference === 'grid') {
                $('.toggle-view-btn[data-view="grid"]').click();
            }
            
            // Handle select all checkbox
            $('#selectAll').on('change', function() {
                $('.category-checkbox').prop('checked', $(this).is(':checked'));
                $('.category-checkbox-grid').prop('checked', $(this).is(':checked'));
                updateBulkActionButton();
            });

            // Handle individual checkboxes (list view)
            $('.category-checkbox').on('change', function() {
                updateBulkActionButton();
                
                // If any checkbox is unchecked, uncheck "Select All" checkbox
                if (!$(this).is(':checked')) {
                    $('#selectAll').prop('checked', false);
                }
                
                // If all checkboxes are checked, check "Select All" checkbox
                if ($('.category-checkbox:checked').length === $('.category-checkbox').length) {
                    $('#selectAll').prop('checked', true);
                }
                
                // Sync with grid view
                const categoryId = $(this).val();
                $('.category-checkbox-grid[value="' + categoryId + '"]').prop('checked', $(this).is(':checked'));
            });
            
            // Handle individual checkboxes (grid view)
            $('.category-checkbox-grid').on('change', function() {
                updateBulkActionButton();
                
                // Sync with list view
                const categoryId = $(this).val();
                $('.category-checkbox[value="' + categoryId + '"]').prop('checked', $(this).is(':checked'));
                
                // Update "Select All" checkbox
                if (!$(this).is(':checked')) {
                    $('#selectAll').prop('checked', false);
                }
                
                if ($('.category-checkbox-grid:checked').length === $('.category-checkbox-grid').length) {
                    $('#selectAll').prop('checked', true);
                }
            });

            // Update bulk action button state
            function updateBulkActionButton() {
                if ($('.category-checkbox:checked').length > 0 || $('.category-checkbox-grid:checked').length > 0) {
                    $('#bulkActionsDropdown').prop('disabled', false);
                } else {
                    $('#bulkActionsDropdown').prop('disabled', true);
                }
            }
            
            // Handle delete confirmation (list view)
            $('.delete-category').on('click', function(e) {
                e.preventDefault();
                const categoryId = $(this).data('id');
                const categoryName = $(this).data('name');
                
                $('#categoryNameToDelete').text(categoryName);
                $('#confirmDeleteBtn').attr('href', '@Url.Action("Delete", "Category")/' + categoryId);
                $('#deleteCategoryModal').modal('show');
            });
            
            // Handle delete confirmation (grid view)
            $('.delete-category-grid').on('click', function(e) {
                e.preventDefault();
                const categoryId = $(this).data('id');
                const categoryName = $(this).data('name');
                
                $('#categoryNameToDelete').text(categoryName);
                $('#confirmDeleteBtn').attr('href', '@Url.Action("Delete", "Category")/' + categoryId);
                $('#deleteCategoryModal').modal('show');
            });
            
            // Bulk actions
            $('.bulk-action').on('click', function(e) {
                e.preventDefault();
                const action = $(this).data('action');
                const selectedIds = [];
                
                // Collect all checked IDs from both views
                $('.category-checkbox:checked, .category-checkbox-grid:checked').each(function() {
                    const id = $(this).val();
                    if (!selectedIds.includes(id)) {
                        selectedIds.push(id);
                    }
                });
                
                if (selectedIds.length === 0) {
                    return;
                }
                
                if (action === 'delete') {
                    if (confirm(`Are you sure you want to delete ${selectedIds.length} selected categories? This action cannot be undone.`)) {
                        // Send AJAX request to delete categories
                        $.post('@Url.Action("BulkDelete", "Category")', { ids: selectedIds.join(',') })
                            .done(function() {
                                location.reload();
                            })
                            .fail(function() {
                                alert('Failed to delete categories. Please try again.');
                            });
                    }
                } else if (action === 'automated' || action === 'manual') {
                    // Send AJAX request to update type
                    $.post('@Url.Action("BulkUpdateType", "Category")', { 
                        ids: selectedIds.join(','), 
                        type: action === 'automated' ? 'Automated' : 'Manual' 
                    })
                    .done(function() {
                        location.reload();
                    })
                    .fail(function() {
                        alert('Failed to update category type. Please try again.');
                    });
                }
            });
            
            // Auto-submit form when type filter changes
            $('#type').on('change', function() {
                $('#filterForm').submit();
            });
            
            // Search on enter key
            $('#searchTerm').on('keypress', function(e) {
                if (e.which === 13) {
                    $('#filterForm').submit();
                }
            });
        });
        
        // Change page size function
        function changePageSize(size) {
            const url = new URL(window.location.href);
            url.searchParams.set('pageSize', size);
            url.searchParams.set('page', 1); // Reset to first page
            window.location.href = url.toString();
        }
    </script>
}